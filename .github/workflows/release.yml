name: Release
on:
  push:
    tags: 
      - 'v*'
jobs:

  build:
    name: Build
    
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: 
        os: [macOS-10.14, ubuntu-18.04, windows-2016]
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Set up env
      run: |
        go env
        mkdir -p $HOME/go/bin
        export PATH=${PATH}:`go env GOPATH`/bin
        go get github.com/GuillemCastro/git-get

    - name: Get dependencies
      run: |
        export PATH=${PATH}:`go env GOPATH`/bin
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      run: |
        go build -v github.com/GuillemCastro/git-get
        zip --junk-paths git-get-${{matrix.os}}.zip git-get
  
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./git-get-${{matrix.os}}.zip
        asset_name: git-get-${{matrix.os}}.zip
        asset_content_type: application/zip
